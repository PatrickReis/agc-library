"""
Cen√°rio 3: Chat com Base Vetorial + Tools
Demonstra assistente que consulta documentos E executa a√ß√µes atrav√©s de ferramentas.
"""

from agentCore import get_llm, get_embeddings, get_logger
from langchain_text_splitters import RecursiveCharacterTextSplitter
from langchain_chroma import Chroma
from langchain_core.messages import HumanMessage, SystemMessage
from langchain_core.documents import Document
from langchain.tools import Tool
from langchain.agents import create_react_agent, AgentExecutor
from langchain import hub
from langchain.prompts import ChatPromptTemplate
import os
import json
import requests
from datetime import datetime, timedelta
from dotenv import load_dotenv

load_dotenv()

def criar_weather_tool():
    """
    Cria uma ferramenta para consultar clima usando API OpenWeatherMap.
    """
    def consultar_clima(cidade: str) -> str:
        """Consulta informa√ß√µes de clima para uma cidade espec√≠fica."""
        try:
            # API key para demonstra√ß√£o (usar API real em produ√ß√£o)
            api_key = os.getenv("OPENWEATHER_API_KEY", "demo_key")

            # Para demo, simular resposta da API
            if api_key == "demo_key":
                return f"""Clima em {cidade}:
                Temperatura: 25¬∞C
                Descri√ß√£o: Ensolarado
                Umidade: 60%
                Vento: 15 km/h

                (Dados simulados para demonstra√ß√£o)"""

            # C√≥digo real da API (comentado para demo)
            # url = f"https://api.openweathermap.org/data/2.5/weather?q={cidade}&appid={api_key}&units=metric&lang=pt"
            # response = requests.get(url)
            # data = response.json()
            # return f"Temperatura em {cidade}: {data['main']['temp']}¬∞C, {data['weather'][0]['description']}"

        except Exception as e:
            return f"Erro ao consultar clima: {str(e)}"

    return Tool(
        name="consultar_clima",
        description="Consulta informa√ß√µes meteorol√≥gicas para uma cidade espec√≠fica. Use quando perguntarem sobre tempo/clima.",
        func=consultar_clima
    )

def criar_calculadora_tool():
    """
    Cria ferramenta para c√°lculos matem√°ticos.
    """
    def calcular(expressao: str) -> str:
        """Realiza c√°lculos matem√°ticos seguros."""
        try:
            # Limpar a express√£o removendo espa√ßos extras e caracteres desnecess√°rios
            expressao_limpa = expressao.strip()

            # Lista de opera√ß√µes permitidas para seguran√ßa
            allowed_chars = "0123456789+-*/.() "
            if not all(c in allowed_chars for c in expressao_limpa):
                return f"Erro: Express√£o '{expressao_limpa}' cont√©m caracteres n√£o permitidos. Use apenas n√∫meros e opera√ß√µes b√°sicas (+, -, *, /, (), .)."

            result = eval(expressao_limpa)
            return f"Resultado: {result:,.2f}"
        except Exception as e:
            return f"Erro no c√°lculo: {str(e)}"

    return Tool(
        name="calculadora",
        description="Realiza c√°lculos matem√°ticos. Use quando precisar calcular valores, percentuais, etc.",
        func=calcular
    )

def criar_agenda_tool():
    """
    Cria ferramenta para simular consulta de agenda.
    """
    def consultar_agenda(data: str) -> str:
        """Consulta agenda para uma data espec√≠fica."""
        try:
            # Simular agenda para demonstra√ß√£o
            agenda_demo = {
                "hoje": [
                    "09:00 - Reuni√£o de equipe",
                    "11:00 - Call com cliente ABC",
                    "14:00 - Revis√£o de projeto",
                    "16:00 - Entrevista candidato"
                ],
                "today": [
                    "09:00 - Reuni√£o de equipe",
                    "11:00 - Call com cliente ABC",
                    "14:00 - Revis√£o de projeto",
                    "16:00 - Entrevista candidato"
                ],
                "amanha": [
                    "08:30 - Standup daily",
                    "10:00 - Apresenta√ß√£o para diretoria",
                    "15:00 - Workshop interno"
                ],
                "outubro": [
                    "Workshop de inova√ß√£o: 15/10 (dia todo)",
                    "Apresenta√ß√£o de resultados: 25/10 (14h)",
                    "Confraterniza√ß√£o de equipe: 31/10 (18h)"
                ],
                "geral": [
                    "Standup di√°rio: 9h (exceto sexta-feira)",
                    "Board meeting: primeira segunda-feira do m√™s (10h)",
                    "All hands: √∫ltima sexta-feira do m√™s (16h)",
                    "Revis√£o de projetos: toda quinta-feira (14h)"
                ]
            }

            data_lower = data.lower().strip()

            # Busca por palavras-chave
            if any(keyword in data_lower for keyword in ["hoje", "today"]):
                compromissos = "\n".join(agenda_demo["hoje"])
                return f"Agenda para hoje:\n{compromissos}\n\nInforma√ß√µes adicionais:\n" + "\n".join(agenda_demo["geral"])
            elif "outubro" in data_lower:
                compromissos = "\n".join(agenda_demo["outubro"])
                return f"Reuni√µes especiais em outubro:\n{compromissos}\n\nReuni√£o fixa:\n" + "\n".join(agenda_demo["geral"])
            elif "standup" in data_lower:
                return "Standup di√°rio: 9h (exceto sexta-feira)"
            elif data_lower in agenda_demo:
                compromissos = "\n".join(agenda_demo[data_lower])
                return f"Agenda para {data}:\n{compromissos}"
            else:
                return f"Agenda para {data}:\nNenhum compromisso espec√≠fico. Reuni√µes fixas:\n" + "\n".join(agenda_demo["geral"])

        except Exception as e:
            return f"Erro ao consultar agenda: {str(e)}"

    return Tool(
        name="consultar_agenda",
        description="Consulta agenda/compromissos. Use quando perguntarem sobre hor√°rios, reuni√µes, etc.",
        func=consultar_agenda
    )

def criar_base_conhecimento():
    """
    Cria base de conhecimento da empresa com foco em informa√ß√µes que podem precisar de ferramentas.
    """
    documentos = [
        Document(
            page_content="""
            Pol√≠tica de Viagens Corporativas

            Procedimentos para viagens a trabalho:
            - Solicitar aprova√ß√£o com 15 dias de anteced√™ncia
            - Verificar condi√ß√µes clim√°ticas do destino
            - Reservas de hotel: at√© R$ 300,00 por di√°ria
            - Alimenta√ß√£o: R$ 150,00 por dia
            - Transporte: classe econ√¥mica para voos nacionais
            - Reembolso mediante apresenta√ß√£o de notas fiscais
            - Seguro viagem obrigat√≥rio para viagens internacionais

            Contato: viagens@empresa.com
            """,
            metadata={"source": "politica_viagens.pdf", "category": "rh"}
        ),
        Document(
            page_content="""
            Relat√≥rio Financeiro - Indicadores Q3 2024

            Principais m√©tricas do trimestre:
            - Receita: R$ 2.500.000 (crescimento de 15% vs Q2)
            - EBITDA: R$ 750.000 (30% da receita)
            - Margem l√≠quida: 18%
            - Inadimpl√™ncia: 2.1%
            - ROI m√©dio dos projetos: 340%
            - Meta anual: R$ 12.000.000 (83% alcan√ßado)

            Proje√ß√£o Q4: R$ 3.200.000 (considerar sazonalidade)
            """,
            metadata={"source": "relatorio_financeiro_q3.pdf", "category": "financeiro"}
        ),
        Document(
            page_content="""
            Cronograma de Reuni√µes - Outubro 2024

            Reuni√µes fixas mensais:
            - Board meeting: primeira segunda-feira do m√™s (10h)
            - All hands: √∫ltima sexta-feira do m√™s (16h)
            - Revis√£o de projetos: toda quinta-feira (14h)
            - Standup: di√°rio √†s 9h (exceto sexta-feira)

            Reuni√µes especiais outubro:
            - Workshop de inova√ß√£o: 15/10 (dia todo)
            - Apresenta√ß√£o de resultados: 25/10 (14h)
            - Confraterniza√ß√£o de equipe: 31/10 (18h)
            """,
            metadata={"source": "cronograma_reunioes.pdf", "category": "gestao"}
        )
    ]

    return documentos

def demo_chat_rag_com_tools():
    """
    Demonstra chat com RAG + ferramentas externas.
    """
    logger = get_logger("chat_rag_tools")

    # Configura√ß√µes
    provider = os.getenv("LLM_PROVIDER", "ollama")
    model_name = os.getenv("MODEL_NAME", "llama3:latest")
    vector_provider = os.getenv("VECTOR_PROVIDER", "chroma")

    logger.info(f"Iniciando RAG+Tools com LLM: {provider}/{model_name}")

    try:
        print("üõ†Ô∏è Configurando ferramentas...")

        # 1. Criar ferramentas
        tools = [
            criar_weather_tool(),
            criar_calculadora_tool(),
            criar_agenda_tool()
        ]

        print(f"‚úÖ {len(tools)} ferramentas configuradas")
        print("üîß Ferramentas dispon√≠veis:")
        for tool in tools:
            print(f"   - {tool.name}: {tool.description}")
        print()

        # 2. Criar base de conhecimento
        print("üìö Criando base de conhecimento...")
        documentos = criar_base_conhecimento()

        # 3. Processar documentos
        text_splitter = RecursiveCharacterTextSplitter(
            chunk_size=500,
            chunk_overlap=50,
            length_function=len,
        )
        chunks = text_splitter.split_documents(documentos)

        # 4. Configurar vector store
        embeddings = get_embeddings(provider_name=provider)

        # Criar vector store usando Chroma diretamente
        texts = [chunk.page_content for chunk in chunks]
        metadatas = [chunk.metadata for chunk in chunks]

        vector_store = Chroma.from_texts(
            texts=texts,
            embedding=embeddings,
            metadatas=metadatas,
            collection_name="rag_tools_demo"
        )
        print("‚úÖ Base de conhecimento indexada")

        # 5. Configurar LLM
        llm = get_llm(provider_name=provider)

        # 6. Criar retriever como ferramenta
        retriever = vector_store.as_retriever(search_kwargs={"k": 3})

        def consultar_documentos(pergunta: str) -> str:
            """Consulta documentos internos da empresa."""
            docs = retriever.invoke(pergunta)
            if docs:
                contexto = "\n\n".join([doc.page_content for doc in docs])
                fontes = [doc.metadata.get('source', 'sem fonte') for doc in docs]
                return f"Informa√ß√µes encontradas:\n{contexto}\n\nFontes: {', '.join(set(fontes))}"
            return "Nenhuma informa√ß√£o encontrada nos documentos internos."

        # Adicionar retriever como ferramenta
        retriever_tool = Tool(
            name="consultar_documentos",
            description="Consulta documentos internos da empresa sobre pol√≠ticas, procedimentos, relat√≥rios, etc.",
            func=consultar_documentos
        )
        tools.append(retriever_tool)

        # 7. Criar prompt personalizado para melhor compatibilidade com Ollama
        prompt_template = """Responda √†s seguintes perguntas da melhor forma poss√≠vel. Voc√™ tem acesso √†s seguintes ferramentas:

{tools}

Use EXATAMENTE o seguinte formato:

Question: a pergunta de entrada que voc√™ deve responder
Thought: voc√™ deve sempre pensar sobre o que fazer
Action: a a√ß√£o a ser tomada, deve ser EXATAMENTE uma das ferramentas: [{tool_names}]
Action Input: a entrada para a a√ß√£o (apenas o texto/valor, sem formata√ß√£o extra)
Observation: o resultado da a√ß√£o
... (este processo Thought/Action/Action Input/Observation pode repetir N vezes)
Thought: Agora eu sei a resposta final
Final Answer: a resposta final √† pergunta original

IMPORTANTE:
- Use APENAS os nomes exatos das ferramentas: {tool_names}
- Para Action Input, forne√ßa apenas o valor necess√°rio, sem aspas ou formata√ß√£o extra
- SEMPRE termine com "Final Answer:" seguido da resposta completa
- Exemplos corretos:
  Action: consultar_clima
  Action Input: S√£o Paulo
  Observation: Clima em S√£o Paulo: 25¬∞C
  Thought: Agora eu sei a resposta final
  Final Answer: O clima em S√£o Paulo est√° 25¬∞C

  Action: calculadora
  Action Input: 2500000 * 0.15
  Observation: Resultado: 375,000.00
  Thought: Agora eu sei a resposta final
  Final Answer: 15% de 2.500.000 √© igual a 375.000,00

Comece!

Question: {input}
Thought:{agent_scratchpad}"""

        prompt = ChatPromptTemplate.from_template(prompt_template)

        # 8. Criar agente ReAct (compat√≠vel com Ollama)
        agent = create_react_agent(llm, tools, prompt)
        agent_executor = AgentExecutor(
            agent=agent,
            tools=tools,
            verbose=True,
            handle_parsing_errors=True,
            max_iterations=3,
            return_intermediate_steps=True
        )

        # 9. Perguntas de exemplo que requerem diferentes ferramentas
        perguntas = [
            "Qual √© a pol√≠tica de viagens da empresa e como est√° o clima em S√£o Paulo hoje?",
            "Preciso calcular 15% de crescimento sobre nossa receita atual de R$ 2.500.000. Quanto seria?",
            "Quais s√£o as reuni√µes programadas para hoje e que horas √© o standup?",
            "Qual √© nossa margem EBITDA e quanto precisamos para atingir a meta anual?",
            "H√° alguma reuni√£o especial em outubro e como est√° o tempo para a confraterniza√ß√£o?"
        ]

        print("\n" + "="*80)
        print("ü§ñ ASSISTENTE EMPRESARIAL COM RAG + FERRAMENTAS")
        print("="*80)

        for i, pergunta in enumerate(perguntas, 1):
            print(f"\n{'='*70}")
            print(f"PERGUNTA {i}: {pergunta}")
            print('='*70)

            # Executar agente com tratamento de erro melhorado
            try:
                response = agent_executor.invoke({"input": pergunta})

                if 'output' in response:
                    print(f"RESPOSTA: {response['output']}")
                else:
                    # Fallback para respostas sem formato correto
                    print(f"RESPOSTA: N√£o foi poss√≠vel processar a pergunta completamente.")

                    # Tentar resposta direta sem agente
                    print("Tentando resposta direta...")
                    direct_response = llm.invoke([HumanMessage(content=pergunta)])
                    print(f"RESPOSTA DIRETA: {direct_response.content}")

            except Exception as agent_error:
                print(f"‚ö†Ô∏è Erro no agente: {str(agent_error)}")
                print("Tentando resposta direta sem ferramentas...")

                try:
                    # Fallback: resposta direta do LLM
                    direct_response = llm.invoke([HumanMessage(content=pergunta)])
                    print(f"RESPOSTA DIRETA: {direct_response.content}")
                except Exception as direct_error:
                    print(f"‚ùå Erro na resposta direta: {str(direct_error)}")

            print()

            logger.info(f"Pergunta {i} processada com sucesso")

        print("\n‚úÖ Demo RAG + Tools conclu√≠da com sucesso!")
        print("\nüí° OBSERVA√á√ÉO: O assistente combinou informa√ß√µes de documentos internos")
        print("   com ferramentas externas para fornecer respostas completas e acion√°veis.")

        logger.info("Demo RAG + Tools finalizada com sucesso")

    except Exception as e:
        error_msg = f"Erro durante execu√ß√£o do RAG + Tools: {str(e)}"
        logger.error(error_msg)
        print(f"‚ùå {error_msg}")
        return False

    return True

def demonstrar_evolucao():
    """
    Mostra a evolu√ß√£o dos cen√°rios.
    """
    print("""
üöÄ EVOLU√á√ÉO DOS CEN√ÅRIOS DE CHAT

CEN√ÅRIO 1 (Chat B√°sico):
üìù Conversa simples com IA
‚ùå Conhecimento limitado ao treinamento do modelo
‚ùå N√£o acessa informa√ß√µes em tempo real
‚ùå N√£o executa a√ß√µes

CEN√ÅRIO 2 (RAG):
üìö + Acesso a documentos internos
‚úÖ Respostas baseadas em conhecimento empresarial
‚ùå Ainda n√£o executa a√ß√µes externas
‚ùå Informa√ß√µes apenas est√°ticas

CEN√ÅRIO 3 (RAG + Tools):
üõ†Ô∏è + Ferramentas externas
‚úÖ Consulta documentos E executa a√ß√µes
‚úÖ Informa√ß√µes em tempo real (clima, c√°lculos)
‚úÖ Integra√ß√£o com sistemas externos
‚úÖ Assistente verdadeiramente √∫til e acion√°vel
""")

def configurar_ambiente():
    """
    Instru√ß√µes de configura√ß√£o.
    """
    print("""
üìã CONFIGURA√á√ÉO DO AMBIENTE - RAG + TOOLS
=========================================

Vari√°veis obrigat√≥rias:
export LLM_PROVIDER=ollama
export MODEL_NAME=llama3:latest
export VECTOR_PROVIDER=chroma

Vari√°veis opcionais:
export OPENWEATHER_API_KEY=sua_chave_api  # Para clima real

Depend√™ncias:
pip install langchain-community
pip install requests
""")

if __name__ == "__main__":
    configurar_ambiente()
    demonstrar_evolucao()

    print("\nüöÄ Executando demo RAG + Tools automaticamente...")
    demo_chat_rag_com_tools()