"""
Cen√°rio 4: Chat com LangGraph - Workflows Complexos
Demonstra a diferen√ßa entre LangChain (linear) e LangGraph (fluxos condicionais).
"""

from agentCore import get_llm, get_embeddings, get_logger
from langchain_core.messages import HumanMessage, SystemMessage, AIMessage
from langchain_core.documents import Document
from langgraph.graph import StateGraph, END
from langgraph.checkpoint.memory import MemorySaver
from typing import TypedDict, Annotated, List
from langchain.tools import Tool
import operator
import sqlite3
import os
from datetime import datetime
from dotenv import load_dotenv

load_dotenv()

class AgentState(TypedDict):
    """Estado compartilhado entre n√≥s do grafo."""
    messages: Annotated[List, operator.add]
    next_step: str
    user_request: str
    analysis_type: str
    collected_data: dict
    final_recommendation: str
    confidence_score: float

def criar_ferramentas_negocio():
    """
    Cria ferramentas especializadas para an√°lise de neg√≥cios.
    """
    def analisar_vendas(periodo: str) -> dict:
        """Simula an√°lise de dados de vendas."""
        vendas_mock = {
            "q3_2024": {
                "receita": 2500000,
                "tickets": 150,
                "ticket_medio": 16667,
                "crescimento": "15%",
                "conversao": "3.2%"
            },
            "mensal": {
                "setembro": 900000,
                "agosto": 850000,
                "julho": 750000,
                "tendencia": "crescente"
            }
        }
        return vendas_mock.get(periodo, {"erro": "Per√≠odo n√£o encontrado"})

    def analisar_market_share(setor: str) -> dict:
        """Simula an√°lise de market share."""
        market_data = {
            "tecnologia": {
                "nossa_posicao": "4¬∫ lugar",
                "participacao": "8.5%",
                "lider": "TechCorp (22%)",
                "crescimento_mercado": "12% ao ano"
            },
            "financeiro": {
                "nossa_posicao": "7¬∫ lugar",
                "participacao": "3.2%",
                "lider": "FinanceCorp (35%)",
                "crescimento_mercado": "6% ao ano"
            }
        }
        return market_data.get(setor, {"erro": "Setor n√£o encontrado"})

    def analisar_concorrencia(concorrente: str) -> dict:
        """An√°lise competitiva."""
        competitors = {
            "techcorp": {
                "pontos_fortes": ["marca forte", "R&D avan√ßado", "escala"],
                "pontos_fracos": ["pre√ßo alto", "atendimento", "inova√ß√£o lenta"],
                "estrategia": "lideran√ßa tecnol√≥gica",
                "vulnerabilidades": ["startups disruptivas", "mudan√ßa de prefer√™ncias"]
            },
            "startupx": {
                "pontos_fortes": ["agilidade", "inova√ß√£o", "pre√ßo"],
                "pontos_fracos": ["recursos limitados", "marca fraca", "escala"],
                "estrategia": "disrup√ß√£o de mercado",
                "vulnerabilidades": ["funding", "competi√ß√£o estabelecida"]
            }
        }
        return competitors.get(concorrente.lower(), {"erro": "Concorrente n√£o encontrado"})

    return [
        Tool(name="analisar_vendas", description="Analisa dados de vendas por per√≠odo", func=analisar_vendas),
        Tool(name="analisar_market_share", description="Analisa participa√ß√£o de mercado por setor", func=analisar_market_share),
        Tool(name="analisar_concorrencia", description="Analisa dados de concorrentes", func=analisar_concorrencia)
    ]

def criar_base_estrategica():
    """
    Base de conhecimento estrat√©gico da empresa.
    """
    documentos = [
        Document(
            page_content="""
            Planejamento Estrat√©gico 2024-2026

            Objetivos estrat√©gicos:
            1. Aumentar market share de 8.5% para 15% em 3 anos
            2. Diversificar portf√≥lio para reduzir depend√™ncia do produto principal
            3. Expandir para 3 novos mercados regionais
            4. Melhorar NPS de 7.2 para 8.5+
            5. Alcan√ßar EBITDA de 35% (atual: 30%)

            Investimentos aprovados:
            - R$ 5M em P&D (foco IA e automa√ß√£o)
            - R$ 3M em expans√£o comercial
            - R$ 2M em marketing digital
            """,
            metadata={"source": "planejamento_estrategico.pdf", "category": "estrategia"}
        ),
        Document(
            page_content="""
            An√°lise SWOT - Atualiza√ß√£o Q3 2024

            FOR√áAS:
            - Equipe t√©cnica qualificada (95% seniores)
            - Portf√≥lio de produtos robustos
            - Relacionamento s√≥lido com clientes (NPS 7.2)
            - Margem operacional saud√°vel (30%)

            FRAQUEZAS:
            - Depend√™ncia de produto principal (70% receita)
            - Marketing limitado vs concorrentes
            - Processo de vendas longo (8 semanas)

            OPORTUNIDADES:
            - Crescimento do mercado de IA (50% ao ano)
            - Digitaliza√ß√£o acelerada p√≥s-pandemia
            - Necessidade de automa√ß√£o empresarial

            AMEA√áAS:
            - Entrada de big techs no mercado
            - Startups com solu√ß√µes disruptivas
            - Recess√£o econ√¥mica global
            """,
            metadata={"source": "analise_swot.pdf", "category": "estrategia"}
        )
    ]
    return documentos

# N√≥s do grafo LangGraph
def analisar_solicitacao(state: AgentState) -> AgentState:
    """Primeiro n√≥: analisa o tipo de solicita√ß√£o do usu√°rio."""
    user_request = state["user_request"]

    # L√≥gica para classificar tipo de an√°lise
    if any(word in user_request.lower() for word in ["vendas", "receita", "faturamento"]):
        analysis_type = "vendas"
    elif any(word in user_request.lower() for word in ["mercado", "concorrencia", "market share"]):
        analysis_type = "mercado"
    elif any(word in user_request.lower() for word in ["estrategia", "swot", "planejamento"]):
        analysis_type = "estrategico"
    else:
        analysis_type = "geral"

    print(f"üîç An√°lise classificada como: {analysis_type}")

    return {
        **state,
        "analysis_type": analysis_type,
        "next_step": "coletar_dados"
    }

def coletar_dados(state: AgentState) -> AgentState:
    """Segundo n√≥: coleta dados baseado no tipo de an√°lise."""
    analysis_type = state["analysis_type"]
    tools = criar_ferramentas_negocio()
    collected_data = {}

    print(f"üìä Coletando dados para an√°lise: {analysis_type}")

    if analysis_type == "vendas":
        # Coleta dados de vendas
        tool_vendas = next(t for t in tools if t.name == "analisar_vendas")
        collected_data["q3"] = tool_vendas.func("q3_2024")
        collected_data["mensal"] = tool_vendas.func("mensal")

    elif analysis_type == "mercado":
        # Coleta dados de mercado e concorr√™ncia
        tool_market = next(t for t in tools if t.name == "analisar_market_share")
        tool_comp = next(t for t in tools if t.name == "analisar_concorrencia")
        collected_data["market"] = tool_market.func("tecnologia")
        collected_data["competitor1"] = tool_comp.func("techcorp")
        collected_data["competitor2"] = tool_comp.func("startupx")

    elif analysis_type == "estrategico":
        # Coleta dados estrat√©gicos da base de conhecimento
        collected_data["strategy"] = "Dados estrat√©gicos coletados da base"
        collected_data["swot"] = "An√°lise SWOT atualizada Q3 2024"
        collected_data["planning"] = "Planejamento estrat√©gico 2024-2026"

    else:  # an√°lise geral
        # Para an√°lise geral, coleta dados de todas as fontes
        tool_vendas = next(t for t in tools if t.name == "analisar_vendas")
        tool_market = next(t for t in tools if t.name == "analisar_market_share")
        tool_comp = next(t for t in tools if t.name == "analisar_concorrencia")

        collected_data["vendas_q3"] = tool_vendas.func("q3_2024")
        collected_data["market_tech"] = tool_market.func("tecnologia")
        collected_data["competitor_main"] = tool_comp.func("techcorp")
        collected_data["base_estrategica"] = "Dados estrat√©gicos da empresa"

    print(f"‚úÖ Dados coletados: {len(collected_data)} fontes")

    return {
        **state,
        "collected_data": collected_data,
        "next_step": "analisar_dados"
    }

def analisar_dados(state: AgentState) -> AgentState:
    """Terceiro n√≥: analisa os dados coletados."""
    collected_data = state["collected_data"]
    analysis_type = state["analysis_type"]

    print(f"üß† Analisando dados para {analysis_type}")

    # Simula√ß√£o de an√°lise com IA
    if analysis_type == "vendas":
        confidence = 0.85
        recommendation = """
        An√°lise de Vendas Q3 2024:
        - Crescimento sustentado de 15% vs Q2
        - Ticket m√©dio saud√°vel (R$ 16,667)
        - Tend√™ncia mensal positiva

        Recomenda√ß√µes:
        1. Manter estrat√©gia atual de vendas
        2. Focar em aumentar taxa de convers√£o (atual 3.2%)
        3. Explorar oportunidades de upsell
        """
    elif analysis_type == "mercado":
        confidence = 0.78
        recommendation = """
        An√°lise de Market Share:
        - Posi√ß√£o: 4¬∫ lugar com 8.5% (meta: 15%)
        - Gap para l√≠der: 13.5 pontos percentuais
        - Mercado crescendo 12% ao ano

        Amea√ßas Identificadas:
        - TechCorp: for√ßa em R&D mas vulner√°vel a startups
        - StartupX: agressiva em pre√ßo, mas recursos limitados

        Estrat√©gia Recomendada:
        1. Atacar pontos fracos do l√≠der (atendimento/inova√ß√£o)
        2. Defender-se de startups com agilidade maior
        3. Investir em diferencia√ß√£o tecnol√≥gica
        """
    elif analysis_type == "estrategico":
        confidence = 0.82
        recommendation = """
        An√°lise Estrat√©gica - Pr√≥ximos Passos:

        Situa√ß√£o Atual:
        - EBITDA: 30% (meta: 35%)
        - Market share: 8.5% (meta: 15%)
        - NPS: 7.2 (meta: 8.5+)

        Recomenda√ß√µes Estrat√©gicas:
        1. CRESCIMENTO ORG√ÇNICO:
           ‚Ä¢ Investir R$ 5M em P&D focado em IA
           ‚Ä¢ Melhorar processo de vendas (reduzir de 8 para 5 semanas)
           ‚Ä¢ Aumentar convers√£o com marketing digital (R$ 2M)

        2. EXPANS√ÉO DE MERCADO:
           ‚Ä¢ Diversificar portf√≥lio (reduzir depend√™ncia de 70% para 50%)
           ‚Ä¢ Expandir para 3 novos mercados regionais
           ‚Ä¢ Atacar pontos fracos do l√≠der (atendimento/inova√ß√£o)

        3. EFICI√äNCIA OPERACIONAL:
           ‚Ä¢ Automa√ß√£o para melhorar margem
           ‚Ä¢ Foco em clientes de maior valor (upsell)
           ‚Ä¢ Otimiza√ß√£o de custos para atingir EBITDA 35%

        Pr√≥ximos 90 dias:
        - Definir roadmap detalhado de P&D
        - Implementar campanha de marketing digital
        - Iniciar projeto de automa√ß√£o de vendas
        """
    else:  # an√°lise geral
        confidence = 0.75
        # Usar dados coletados para an√°lise abrangente
        vendas_data = collected_data.get("vendas_q3", {})
        market_data = collected_data.get("market_tech", {})

        recommendation = f"""
        An√°lise Estrat√©gica Completa - Pr√≥ximos Passos:

        SITUA√á√ÉO ATUAL:
        ‚Ä¢ Receita Q3: R$ {vendas_data.get('receita', 'N/A'):,} (crescimento: {vendas_data.get('crescimento', 'N/A')})
        ‚Ä¢ Market Share: {market_data.get('participacao', 'N/A')} - {market_data.get('nossa_posicao', 'N/A')}
        ‚Ä¢ L√≠der do mercado: {market_data.get('lider', 'N/A')}
        ‚Ä¢ Crescimento do mercado: {market_data.get('crescimento_mercado', 'N/A')}

        DIAGN√ìSTICO:
        ‚úÖ Pontos Fortes: Crescimento sustentado, margem saud√°vel
        ‚ö†Ô∏è Desafios: Gap para lideran√ßa, depend√™ncia de produto principal
        üéØ Oportunidades: Mercado em crescimento, automa√ß√£o empresarial

        ESTRAT√âGIA RECOMENDADA:

        1. CURTO PRAZO (3-6 meses):
           ‚Ä¢ Acelerar vendas: otimizar processo para reduzir ciclo
           ‚Ä¢ Aumentar convers√£o: melhorar qualifica√ß√£o de leads
           ‚Ä¢ Reten√ß√£o: programa de success para aumentar NPS

        2. M√âDIO PRAZO (6-18 meses):
           ‚Ä¢ Diversifica√ß√£o: desenvolver 2 novos produtos/servi√ßos
           ‚Ä¢ Expans√£o: entrar em mercados adjacentes
           ‚Ä¢ Efici√™ncia: automa√ß√£o de processos internos

        3. LONGO PRAZO (18+ meses):
           ‚Ä¢ Lideran√ßa tecnol√≥gica: investimento em IA/ML
           ‚Ä¢ Acquisi√ß√µes estrat√©gicas: consolidar posi√ß√£o
           ‚Ä¢ Internacionaliza√ß√£o: explorar mercados externos

        M√âTRICAS-CHAVE A MONITORAR:
        - Market share (meta: 15% em 3 anos)
        - EBITDA (meta: 35%)
        - NPS (meta: 8.5+)
        - Diversifica√ß√£o de receita (meta: 50% produto principal)

        PR√ìXIMOS PASSOS IMEDIATOS:
        1. Aprova√ß√£o do board para investimentos priorizados
        2. Forma√ß√£o de task force para execu√ß√£o
        3. Defini√ß√£o de OKRs trimestrais alinhados √† estrat√©gia
        4. Setup de dashboard executivo para acompanhamento
        """

    return {
        **state,
        "final_recommendation": recommendation,
        "confidence_score": confidence,
        "next_step": "gerar_relatorio"
    }

def gerar_relatorio(state: AgentState) -> AgentState:
    """N√≥ final: gera relat√≥rio executivo."""
    print("üìã Gerando relat√≥rio executivo final")

    # Extrair informa√ß√µes do estado
    analysis_type = state.get("analysis_type", "N/A")
    confidence = state.get("confidence_score", 0)
    recommendation = state.get("final_recommendation", "Nenhuma recomenda√ß√£o dispon√≠vel")
    collected_data = state.get("collected_data", {})

    # Exibir relat√≥rio completo
    print(f"\n{'='*80}")
    print(f"üìä RELAT√ìRIO EXECUTIVO - AN√ÅLISE {analysis_type.upper()}")
    print(f"{'='*80}")
    print(f"üéØ CONFIAN√áA DA AN√ÅLISE: {confidence:.0%}")
    print(f"üìà FONTES DE DADOS: {len(collected_data)} fontes consultadas")
    print(f"\nüìã RECOMENDA√á√ïES ESTRAT√âGICAS:")
    print(recommendation)
    print(f"\n{'='*80}")

    # Adicionar sum√°rio executivo
    summary = f"""
üîç SUM√ÅRIO EXECUTIVO:
‚Ä¢ Tipo de an√°lise: {analysis_type}
‚Ä¢ Confian√ßa: {confidence:.0%}
‚Ä¢ Fontes consultadas: {len(collected_data)}
‚Ä¢ Status: An√°lise conclu√≠da com sucesso
"""
    print(summary)

    return {
        **state,
        "next_step": "finalizado"
    }

def decidir_proximo_passo(state: AgentState) -> str:
    """Fun√ß√£o de decis√£o condicional do grafo."""
    next_step = state.get("next_step", "analisar_solicitacao")

    if next_step == "finalizado":
        return "__end__"
    return next_step

def demo_langgraph_vs_langchain():
    """
    Demonstra diferen√ßas entre LangChain e LangGraph.
    """
    logger = get_logger("langgraph_demo")

    print("""
üîÑ DEMONSTRA√á√ÉO: LANGCHAIN vs LANGGRAPH
=========================================

LANGCHAIN (Cen√°rios 1-3):
- Fluxo LINEAR: Pergunta ‚Üí Processamento ‚Üí Resposta
- Sem decis√µes condicionais complexas
- Limitado para workflows simples

LANGGRAPH (Cen√°rio 4):
- Fluxo CONDICIONAL: M√∫ltiplos caminhos baseados em contexto
- Decis√µes inteligentes em cada etapa
- Ideal para an√°lises complexas e workflows empresariais
""")

    try:
        # Configurar LLM
        provider = os.getenv("LLM_PROVIDER", "ollama")
        model_name = os.getenv("MODEL_NAME", "llama3:latest")
        llm = get_llm(provider_name=provider)

        # Criar grafo LangGraph
        workflow = StateGraph(AgentState)

        # Adicionar n√≥s
        workflow.add_node("analisar_solicitacao", analisar_solicitacao)
        workflow.add_node("coletar_dados", coletar_dados)
        workflow.add_node("analisar_dados", analisar_dados)
        workflow.add_node("gerar_relatorio", gerar_relatorio)

        # Definir edges condicionais
        workflow.set_entry_point("analisar_solicitacao")
        workflow.add_conditional_edges(
            "analisar_solicitacao",
            decidir_proximo_passo,
            {
                "coletar_dados": "coletar_dados",
                "__end__": END
            }
        )
        workflow.add_conditional_edges(
            "coletar_dados",
            decidir_proximo_passo,
            {
                "analisar_dados": "analisar_dados",
                "__end__": END
            }
        )
        workflow.add_conditional_edges(
            "analisar_dados",
            decidir_proximo_passo,
            {
                "gerar_relatorio": "gerar_relatorio",
                "__end__": END
            }
        )
        workflow.add_conditional_edges(
            "gerar_relatorio",
            decidir_proximo_passo,
            {
                "__end__": END
            }
        )

        # Configurar persist√™ncia (opcional)
        memory = MemorySaver()
        app = workflow.compile(checkpointer=memory)

        # Cen√°rios de teste
        cenarios = [
            "Preciso de uma an√°lise completa das nossas vendas do Q3 para apresentar ao board",
            "Como estamos posicionados no mercado vs concorr√™ncia? Quais s√£o as amea√ßas?",
            "Gostaria de uma an√°lise estrat√©gica para definir pr√≥ximos passos da empresa"
        ]

        print("\n" + "="*80)
        print("ü§ñ ASSISTENTE ESTRAT√âGICO COM LANGGRAPH")
        print("="*80)

        for i, pergunta in enumerate(cenarios, 1):
            print(f"\n{'='*70}")
            print(f"CEN√ÅRIO {i}: {pergunta}")
            print('='*70)

            # Estado inicial
            initial_state = {
                "messages": [],
                "user_request": pergunta,
                "next_step": "analisar_solicitacao",
                "analysis_type": "",
                "collected_data": {},
                "final_recommendation": "",
                "confidence_score": 0.0
            }

            # Executar workflow
            print(f"\nüöÄ Executando workflow LangGraph...")

            config = {"configurable": {"thread_id": f"scenario_{i}"}}
            result = app.invoke(initial_state, config=config)

            # Apresentar resultados
            print(f"\nüìä AN√ÅLISE CONCLU√çDA")
            print(f"Tipo: {result['analysis_type']}")
            print(f"Confian√ßa: {result['confidence_score']:.0%}")
            print(f"\nüìã RECOMENDA√á√ïES:")
            print(result['final_recommendation'])
            print("\n" + "="*70)

            logger.info(f"Cen√°rio {i} processado via LangGraph")

        print("\n‚úÖ Demo LangGraph conclu√≠da!")
        print("\nüí° OBSERVA√á√ÉO: O LangGraph permitiu workflows condicionais complexos")
        print("   que se adaptam automaticamente ao tipo de solicita√ß√£o empresarial.")

    except Exception as e:
        error_msg = f"Erro durante execu√ß√£o LangGraph: {str(e)}"
        logger.error(error_msg)
        print(f"‚ùå {error_msg}")
        return False

    return True

def comparar_arquiteturas():
    """
    Compara√ß√£o t√©cnica detalhada.
    """
    print("""
üîç COMPARA√á√ÉO T√âCNICA DETALHADA
================================

LANGCHAIN (Linear):
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ   Entrada   ‚îÇ‚îÄ‚îÄ‚îÄ‚ñ∂‚îÇ Processamento‚îÇ‚îÄ‚îÄ‚îÄ‚ñ∂‚îÇ   Sa√≠da     ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò

- Adequado para: Chat simples, RAG b√°sico
- Limita√ß√µes: Sem decis√µes condicionais, fluxo fixo

LANGGRAPH (Condicional):
                    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
                    ‚îÇ Classificar ‚îÇ
                    ‚îÇ Solicita√ß√£o ‚îÇ
                    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
                           ‚îÇ
                    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
                    ‚îÇ  Decis√£o    ‚îÇ
                    ‚îÇ Condicional ‚îÇ
                    ‚îî‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îò
                       ‚îÇ      ‚îÇ
        ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñº‚îê    ‚îå‚ñº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
        ‚îÇ Coletar     ‚îÇ    ‚îÇ An√°lise      ‚îÇ
        ‚îÇ Dados Vendas‚îÇ    ‚îÇ Estrat√©gica  ‚îÇ
        ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
                       ‚îÇ      ‚îÇ
                    ‚îå‚îÄ‚îÄ‚ñº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñº‚îÄ‚îÄ‚îÄ‚îê
                    ‚îÇ  An√°lise    ‚îÇ
                    ‚îÇ  Integrada  ‚îÇ
                    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò

- Adequado para: Workflows complexos, an√°lises estrat√©gicas
- Vantagens: Adapta√ß√£o autom√°tica, m√∫ltiplos caminhos
""")

def configurar_ambiente():
    """
    Configura√ß√£o do ambiente.
    """
    print("""
üìã CONFIGURA√á√ÉO - LANGGRAPH
============================

Depend√™ncias adicionais:
pip install langgraph
pip install sqlite3  # Para persist√™ncia

Configura√ß√£o padr√£o:
export LLM_PROVIDER=ollama
export MODEL_NAME=llama3:latest

Observa√ß√£o: LangGraph permite workflows mais sofisticados
que requerem planejamento cuidadoso da l√≥gica de neg√≥cio.
""")

if __name__ == "__main__":
    configurar_ambiente()
    comparar_arquiteturas()

    print("\nüöÄ Executando demo LangGraph automaticamente...")
    demo_langgraph_vs_langchain()