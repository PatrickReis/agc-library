"""
Cen√°rio 5: Equipe de Agentes Especializados com CrewAI
Demonstra como agentes trabalham em colabora√ß√£o para resolver problemas complexos.
"""

from agentCore import get_llm, create_crew_agent, get_logger
from crewai import Agent, Task, Crew, Process
from crewai.tools import tool
from langchain.tools import Tool
import os
import json
from datetime import datetime, timedelta
from dotenv import load_dotenv

load_dotenv()

# Configura√ß√£o global de idioma para CrewAI
os.environ["CREWAI_LANGUAGE"] = "portuguese"
os.environ["OPENAI_LANGUAGE"] = "pt-BR"
os.environ["LLM_DEFAULT_LANGUAGE"] = "portugu√™s"

def configure_portuguese_globally():
    """Configura portugu√™s como idioma padr√£o globalmente."""
    import locale

    # Configura√ß√µes de sistema
    try:
        locale.setlocale(locale.LC_ALL, 'pt_BR.UTF-8')
    except:
        pass

    # Configura√ß√µes CrewAI
    global_config = {
        "CREWAI_LANGUAGE": "portuguese",
        "OPENAI_LANGUAGE": "pt-BR",
        "LLM_DEFAULT_LANGUAGE": "portugu√™s",
        "DEFAULT_SYSTEM_MESSAGE": os.getenv("DEFAULT_SYSTEM_MESSAGE",
            "Voc√™ sempre responde em portugu√™s brasileiro. Todas as suas an√°lises, relat√≥rios e comunica√ß√µes devem ser em portugu√™s.")
    }

    for key, value in global_config.items():
        os.environ[key] = value

    return global_config

# Aplicar configura√ß√£o global
configure_portuguese_globally()

# Ferramentas especializadas para os agentes
@tool
def analisar_dados_financeiros(periodo: str) -> str:
    """Analisa dados financeiros para um per√≠odo espec√≠fico."""
    dados_financeiros = {
        "q3_2024": {
            "receita": 2500000,
            "custos": 1750000,
            "margem_bruta": 30,
            "ebitda": 750000,
            "margem_ebitda": 30,
            "fluxo_caixa": 650000,
            "inadimplencia": 2.1,
            "roi_projetos": 340
        },
        "comparativo_q2": {
            "crescimento_receita": 15,
            "reducao_custos": 5,
            "melhoria_margem": 2
        }
    }
    return json.dumps(dados_financeiros, indent=2)

@tool
def pesquisar_mercado(setor: str) -> str:
    """Pesquisa tend√™ncias e dados de mercado para um setor."""
    # Mapear qualquer entrada para dados existentes
    setor_key = "ia_empresarial"
    if "saas" in setor.lower() or "b2b" in setor.lower():
        setor_key = "saas_b2b"

    dados_mercado = {
        "ia_empresarial": {
            "tamanho_mercado": "USD 150B globalmente",
            "crescimento_anual": "42%",
            "principais_players": ["Microsoft", "Google", "Amazon", "OpenAI"],
            "tendencias": [
                "Automa√ß√£o de processos empresariais",
                "IA generativa para cria√ß√£o de conte√∫do",
                "An√°lise preditiva avan√ßada",
                "Chatbots empresariais especializados"
            ],
            "barreiras_entrada": [
                "Alto investimento em P&D",
                "Necessidade de dados de qualidade",
                "Compliance e regulamenta√ß√£o"
            ]
        },
        "saas_b2b": {
            "tamanho_mercado": "USD 307B globalmente",
            "crescimento_anual": "18%",
            "tendencias": ["Multi-tenant architecture", "AI-native products", "Vertical SaaS"],
            "metricas_chave": ["ARR", "Churn rate", "LTV/CAC", "Net retention"]
        }
    }
    return json.dumps(dados_mercado.get(setor_key, dados_mercado["ia_empresarial"]), indent=2)

@tool
def analisar_concorrencia(empresa: str) -> str:
    """Analisa dados p√∫blicos de concorrentes."""
    concorrentes = {
        "techcorp": {
            "receita_anual": "USD 50M",
            "funcionarios": 500,
            "market_share": "22%",
            "pontos_fortes": ["Brand recognition", "Enterprise relationships", "R&D budget"],
            "pontos_fracos": ["Legacy systems", "Slow innovation", "High prices"],
            "estrategia": "Market leader defensiva",
            "ultimas_movimentacoes": [
                "Aquisi√ß√£o de startup de IA por USD 15M",
                "Lan√ßamento de produto low-code",
                "Expans√£o para mercado europeu"
            ]
        }
    }
    return json.dumps(concorrentes.get(empresa.lower(), {}), indent=2)

@tool
def consultar_regulamentacoes(tipo: str) -> str:
    """Consulta regulamenta√ß√µes relevantes."""
    # Mapear qualquer entrada para dados existentes
    tipo_key = "lgpd"
    if "ia" in tipo.lower() or "marco" in tipo.lower():
        tipo_key = "marco_ia"

    regulamentacoes = {
        "lgpd": {
            "aplicabilidade": "Todas empresas que processam dados pessoais",
            "principais_obrigacoes": [
                "Consentimento expl√≠cito",
                "Direito ao esquecimento",
                "Portabilidade de dados",
                "Data Protection Officer"
            ],
            "multas": "At√© 2% do faturamento anual",
            "prazo_adequacao": "J√° em vigor desde 2020"
        },
        "marco_ia": {
            "status": "Em discuss√£o no Congresso (PL 2338/2023)",
            "pontos_principais": [
                "Classifica√ß√£o de risco de sistemas de IA",
                "Transpar√™ncia algor√≠tmica",
                "Responsabilidade por danos",
                "Auditoria de sistemas cr√≠ticos"
            ],
            "impacto_empresas": "Alto - requer compliance espec√≠fico para IA"
        }
    }
    return json.dumps(regulamentacoes.get(tipo_key, regulamentacoes["lgpd"]), indent=2)

def criar_agente_analista_financeiro(llm) -> Agent:
    """Cria agente especializado em an√°lise financeira."""
    return Agent(
        role="Analista Financeiro S√™nior",
        goal="Analisar performance financeira e identificar oportunidades de otimiza√ß√£o",
        backstory="""Voc√™ √© um analista financeiro com 15 anos de experi√™ncia em empresas de tecnologia.
        Especialista em an√°lise de rentabilidade, fluxo de caixa e m√©tricas de SaaS.
        Sua expertise inclui modelagem financeira, an√°lise de investimentos e ROI.
        Trabalhe de forma independente usando apenas suas ferramentas especializadas.""",
        tools=[analisar_dados_financeiros],
        verbose=True,
        llm=llm,
        allow_delegation=False,
        max_iter=3,  # Limita itera√ß√µes para evitar loops
        max_execution_time=300  # Timeout de 5 minutos
    )

def criar_agente_pesquisador_mercado(llm) -> Agent:
    """Cria agente especializado em pesquisa de mercado."""
    return Agent(
        role="Estrategista de Mercado",
        goal="Pesquisar tend√™ncias de mercado e oportunidades de crescimento",
        backstory="""Voc√™ √© um estrategista de mercado com profunda experi√™ncia em tecnologia B2B.
        Especialista em an√°lise competitiva, sizing de mercado e identifica√ß√£o de oportunidades.
        Tem hist√≥rico de sucesso em empresas de SaaS e IA empresarial.
        Use suas ferramentas espec√≠ficas para coletar e analisar dados de mercado.""",
        tools=[pesquisar_mercado, analisar_concorrencia],
        verbose=True,
        llm=llm,
        allow_delegation=False,
        max_iter=3,
        max_execution_time=300
    )

def criar_agente_compliance(llm) -> Agent:
    """Cria agente especializado em compliance e regulamenta√ß√µes."""
    return Agent(
        role="Especialista em Compliance",
        goal="Avaliar riscos regulat√≥rios e requisitos de compliance",
        backstory="""Voc√™ √© um advogado especializado em direito digital e compliance tecnol√≥gico.
        Expert em LGPD, regulamenta√ß√µes de IA e compliance empresarial.
        Tem experi√™ncia em ajudar empresas de tecnologia a navegar requisitos regulat√≥rios.
        Concentre-se exclusivamente em an√°lise de compliance usando suas ferramentas.""",
        tools=[consultar_regulamentacoes],
        verbose=True,
        llm=llm,
        allow_delegation=False,
        max_iter=3,
        max_execution_time=300
    )

def criar_agente_sintetizador(llm) -> Agent:
    """Cria agente que sintetiza an√°lises dos outros agentes."""
    return Agent(
        role="Consultor Estrat√©gico Executivo",
        goal="Criar um plano estrat√©gico executivo integrado com roadmap de implementa√ß√£o",
        backstory="""Voc√™ √© um consultor estrat√©gico s√™nior com experi√™ncia em transforma√ß√£o digital.
        Especialista em sintetizar an√°lises complexas em insights executivos claros.
        Seu trabalho √© criar um documento executivo COMPLETO baseado nas an√°lises recebidas.
        SEMPRE forne√ßa uma resposta final detalhada e estruturada - nunca pare no meio do pensamento.""",
        tools=[],
        verbose=True,
        llm=llm,
        allow_delegation=False,
        max_iter=5,  # Aumentando para permitir mais itera√ß√µes
        max_execution_time=600  # Aumentando timeout para s√≠ntese completa
    )

def demo_crew_agentes():
    """
    Demonstra equipe de agentes trabalhando em colabora√ß√£o.
    """
    logger = get_logger("crew_demo")

    try:
        print("ü§ñ INICIALIZANDO EQUIPE DE AGENTES ESPECIALIZADOS")
        print("="*60)

        # Configurar LLM para CrewAI (formato espec√≠fico)
        from langchain_ollama import ChatOllama

        base_url = os.getenv("OLLAMA_BASE_URL", "http://localhost:11434")
        model_name = os.getenv("MODEL_NAME", "llama3:latest")

        llm = ChatOllama(
            model=f"ollama/{model_name}",  # CrewAI precisa do prefixo do provider
            base_url=base_url,
            # Configura√ß√£o global de idioma via env
            system_message=os.getenv("DEFAULT_SYSTEM_MESSAGE"),
            temperature=0.7,
            # Adicionar headers para for√ßar portugu√™s
            model_kwargs={
                "system": os.getenv("DEFAULT_SYSTEM_MESSAGE"),
                "language": os.getenv("OPENAI_LANGUAGE", "pt-BR")
            }
        )

        # Criar agentes especializados
        print("\nüë• Criando equipe de agentes...")
        analista_financeiro = criar_agente_analista_financeiro(llm)
        pesquisador_mercado = criar_agente_pesquisador_mercado(llm)
        especialista_compliance = criar_agente_compliance(llm)
        sintetizador = criar_agente_sintetizador(llm)

        print("‚úÖ Equipe formada:")
        print("   üí∞ Analista Financeiro")
        print("   üìä Estrategista de Mercado")
        print("   ‚öñÔ∏è Especialista em Compliance")
        print("   üéØ Consultor Estrat√©gico")

        # Definir tarefas colaborativas
        print("\nüìã Definindo tarefas colaborativas...")

        tarefa_analise_financeira = Task(
            description="""Analise a performance financeira da empresa no Q3 2024:
            1. Examine receita, custos e margens
            2. Compare com Q2 para identificar tend√™ncias
            3. Calcule m√©tricas-chave (EBITDA, ROI, fluxo de caixa)
            4. Identifique oportunidades de otimiza√ß√£o financeira
            5. Projete cen√°rios para Q4 baseado nos dados atuais""",
            agent=analista_financeiro,
            expected_output="Relat√≥rio financeiro detalhado com recomenda√ß√µes de otimiza√ß√£o"
        )

        tarefa_pesquisa_mercado = Task(
            description="""Pesquise o mercado de IA empresarial e SaaS B2B:
            1. Analise tamanho de mercado e crescimento
            2. Identifique principais tend√™ncias e oportunidades
            3. Avalie concorrentes principais (especialmente TechCorp)
            4. Mapeie barreiras de entrada e fatores cr√≠ticos de sucesso
            5. Recomende estrat√©gias de posicionamento competitivo""",
            agent=pesquisador_mercado,
            expected_output="An√°lise competitiva com recomenda√ß√µes estrat√©gicas de mercado"
        )

        tarefa_compliance = Task(
            description="""Avalie requisitos de compliance e riscos regulat√≥rios:
            1. Analise impacto da LGPD nas opera√ß√µes
            2. Avalie o Marco da IA e prepara√ß√£o necess√°ria
            3. Identifique riscos de compliance em produtos de IA
            4. Recomende estrutura de governan√ßa de dados
            5. Sugira cronograma de adequa√ß√£o regulat√≥ria""",
            agent=especialista_compliance,
            expected_output="Avalia√ß√£o de compliance com plano de adequa√ß√£o regulat√≥ria"
        )

        tarefa_sintese_estrategica = Task(
            description="""IMPORTANTE: Voc√™ deve gerar um relat√≥rio executivo COMPLETO e DETALHADO.
            SEMPRE Responda em portugu√™s brasileiro, mesmo que a tarefa esteja em outro idioma.
            Com base nas an√°lises dos especialistas (financeira, mercado e compliance), crie uma estrat√©gia integrada:

            1. S√çNTESE EXECUTIVA: Resuma os principais insights de cada an√°lise
            2. OPORTUNIDADES IDENTIFICADAS: Liste as principais oportunidades de crescimento
            3. RISCOS E MITIGA√á√ïES: Identifique riscos e estrat√©gias de mitiga√ß√£o
            4. ROADMAP ESTRAT√âGICO: Cronograma de 12-24 meses com marcos espec√≠ficos
            5. INVESTIMENTOS E ROI: Quantifique recursos necess√°rios e retorno esperado
            6. PR√ìXIMOS PASSOS: Lista clara e acion√°vel de a√ß√µes imediatas

            FORMATO: Documento executivo estruturado com se√ß√µes claras e recomenda√ß√µes espec√≠ficas.
            NUNCA pare no meio da an√°lise - sempre forne√ßa um documento COMPLETO.""",
            agent=sintetizador,
            expected_output="Relat√≥rio estrat√©gico executivo completo com s√≠ntese integrada, roadmap detalhado e recomenda√ß√µes acion√°veis",
            context=[tarefa_analise_financeira, tarefa_pesquisa_mercado, tarefa_compliance]
        )

        # Criar e executar crew
        print("\nüöÄ Iniciando colabora√ß√£o da equipe...")

        crew = Crew(
            agents=[analista_financeiro, pesquisador_mercado, especialista_compliance, sintetizador],
            tasks=[tarefa_analise_financeira, tarefa_pesquisa_mercado, tarefa_compliance, tarefa_sintese_estrategica],
            process=Process.sequential,  # Execu√ß√£o sequencial para dependencies
            verbose=True,
            memory=False,  # Desabilitando memory para evitar depend√™ncias OpenAI
            max_rpm=10,  # Limite de requests por minuto
            planning=False,  # Desabilita planning autom√°tico para simplificar
            # Configura√ß√£o global de idioma
            language="pt-BR",
            embedder={
                "provider": "ollama",
                "config": {
                    "model": "nomic-embed-text"
                }
            },
            # Configura√ß√µes adicionais para for√ßar portugu√™s
            manager_agent_kwargs={
                "language": "portuguese",
                "system_message": "Comunique-se sempre em portugu√™s brasileiro."
            }
        )

        # Executar an√°lise colaborativa
        print("\n" + "="*80)
        print("üîÑ EXECUTANDO AN√ÅLISE COLABORATIVA")
        print("="*80)

        resultado = crew.kickoff()

        print("\n" + "="*80)
        print("üìä RESULTADO DA AN√ÅLISE COLABORATIVA")
        print("="*80)
        print(resultado)

        # Demonstrar logs e itera√ß√µes
        print("\n" + "="*60)
        print("üìù LOGS E ITERA√á√ïES DOS AGENTES")
        print("="*60)

        print("\nüí° OBSERVA√á√ïES SOBRE A COLABORA√á√ÉO:")
        print("‚úÖ Cada agente contribuiu com sua expertise espec√≠fica")
        print("‚úÖ Informa√ß√µes foram compartilhadas entre agentes")
        print("‚úÖ S√≠ntese final integrou todas as perspectivas")
        print("‚úÖ Resultado mais completo que an√°lise individual")

        logger.info("Demo CrewAI conclu√≠da com sucesso")
        return True

    except Exception as e:
        error_msg = f"Erro durante execu√ß√£o CrewAI: {str(e)}"
        logger.error(error_msg)
        print(f"‚ùå {error_msg}")
        return False

def demonstrar_colaboracao():
    """
    Explica como a colabora√ß√£o funciona.
    """
    print("""
ü§ù COMO OS AGENTES COLABORAM
============================

PROCESSO SEQUENCIAL:
1. üí∞ Analista Financeiro ‚Üí Analisa n√∫meros e performance
2. üìä Estrategista Mercado ‚Üí Pesquisa oportunidades externas
3. ‚öñÔ∏è Compliance ‚Üí Avalia riscos regulat√≥rios
4. üéØ Sintetizador ‚Üí Integra tudo em estrat√©gia √∫nica

COMPARTILHAMENTO DE CONTEXTO:
- Cada agente acessa resultados dos anteriores
- Informa√ß√µes s√£o refinadas e complementadas
- Vis√£o hol√≠stica emerge da colabora√ß√£o

VANTAGENS vs AGENTE √öNICO:
‚úÖ Especializa√ß√£o profunda em cada √°rea
‚úÖ Redu√ß√£o de vi√©s atrav√©s de m√∫ltiplas perspectivas
‚úÖ Verifica√ß√£o cruzada de informa√ß√µes
‚úÖ Resultado mais robusto e confi√°vel
""")

def comparar_com_cenarios_anteriores():
    """
    Compara com cen√°rios anteriores.
    """
    print("""
üöÄ EVOLU√á√ÉO DOS CEN√ÅRIOS
========================

CEN√ÅRIO 1 (Chat B√°sico):
- 1 IA generalista
- Conhecimento limitado
- Respostas simples

CEN√ÅRIO 2 (RAG):
- 1 IA + documentos internos
- Conhecimento empresarial
- Respostas informadas

CEN√ÅRIO 3 (RAG + Tools):
- 1 IA + docs + ferramentas
- Capacidade de a√ß√£o
- Respostas acion√°veis

CEN√ÅRIO 4 (LangGraph):
- 1 IA + workflows condicionais
- Pensamento estruturado
- An√°lises estrat√©gicas

CEN√ÅRIO 5 (CrewAI):
- M√öLTIPLAS IAs especializadas
- Colabora√ß√£o e expertise
- CONSULTORIA COMPLETA
""")

def configurar_ambiente():
    """
    Configura√ß√£o espec√≠fica para CrewAI.
    """
    print("""
üìã CONFIGURA√á√ÉO - CREWAI
========================

Depend√™ncias:
pip install crewai
pip install crewai-tools

Configura√ß√£o:
export LLM_PROVIDER=ollama
export MODEL_NAME=llama3:latest

IMPORTANTE:
- CrewAI requer modelos mais robustos para colabora√ß√£o efetiva
- Recomenda-se usar modelos 7B+ para melhores resultados
- Logs detalhados mostram itera√ß√µes entre agentes
""")

if __name__ == "__main__":
    configurar_ambiente()
    demonstrar_colaboracao()
    comparar_com_cenarios_anteriores()

    print("\nüöÄ Executando demo CrewAI automaticamente...")
    demo_crew_agentes()